# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nlBcjJe7EMBzbLEzzoA6udP1fklwZHrT

### Transformers
"""

# !pip install transformers datasets sacremoses torch
# from IPython.display import clear_output
# clear_output()

# import datasets
# import pandas as pd
# import datasets
# import transformers
# from transformers import AutoTokenizer
import torch
import math

class InputEmbeddings(torch.nn.Module):
    def __init__(self, d_model: int, vocab_size: int):
        super().__init__()
        self.d_model = d_model
        self.vocab_size = vocab_size
        self.embedding = torch.nn.Embedding(vocab_size, d_model)
        # embeddings are generated by using Pytorch's inbuilt function to convert a vector into an embedding

    def forward(self, x):
        return self.embedding(x) * math.sqrt(self.d_model)

class PositionalEncoding(torch.nn.Module):
    def __init__(self, d_model: int, seq_len: int, dropout: float):
        super().__init__()
        self.d_model = d_model
        self.seq_len = seq_len
        self.dropout = torch.nn.Dropout(dropout)

        # create a matrix of shaope (seq_len , d_model)
        pe = torch.zeros(seq_len, d_model)

        # create a vector of shape (seq_len,1)
        position = torch.arange(0, seq_len, dtype=torch.float).unsqueeze(1)

        # create a vector of shape (d_model,1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))

        # apply sin to even indices
        pe[:, 0::2] = torch.sin(position * div_term)
        # apply cos to odd indices
        pe[:, 1::2] = torch.cos(position * div_term)

        # add a batch dimension to the positional encoding
        pe = pe.unsqueeze(0)
        # register the positional encoding as a buffer, the learned parameter will be stored along with the model, since declared as buffer
        self.register_buffer('pe', pe)

        def forward(self, x):
            x = x + (self.pe[:, :x.size(1), :]).requires_grad_(False)
            # autograd is false, as these embeddings will be constant throughout the model, thus we don't need to learn them during training
            return self.dropout(x)

class LayerNormalization(torch.nn.Module):
      def __init__(self, eps: float = 10**-6) -> None:
        super().__init__()
        self.eps = eps
        self.alpha = torch.nn.Parameter(torch.ones(1)) # multiplicative term
        self.beta = torch.nn.Parameter(torch.zeros(1)) # additive term
        # both alpha and beta are parameters that are introduced for some fluctuation

      def forward(self, x):
            mean = x.mean(-1, keepdim=True)
            std = x.std(-1, keepdim=True)
            return self.alpha * (x - mean) / (std + self.eps)

class FeedForwardBlock(torch.nn.Module):
    def __init__(self, d_model: int, d_ff: int, dropout: float) -> None:
        super().__init__()
        self.linear_1 = torch.nn.Linear(d_model, d_ff)   # W1 and b1
        self.dropout = torch.nn.Dropout(dropout)
        self.linear_2 = torch.nn.Linear(d_ff, d_model)   # W2 and b2

    def forward(self, x):
      # (Batch, seq_len, d_model) --> (batch, seq_len, d_ff) --> (batch, seq_len, d_model)
      return self.linear_2(self.dropout(torch.relu(self.linear_1(x))))

class MultiHeadAttentionBlock(torch.nn.Module):
    def __init__(self, d_model: int, h: int, dropout: float) -> None:
        super().__init__()
        self.d_model = d_model
        self.h = h
        assert d_model % h == 0, "d_model is not divisible by h"

        self.d_k = d_model // h
        self.w_q = torch.nn.Linear(d_model, d_model) # Wq
        self.w_k = torch.nn.Linear(d_model, d_model) # Wk
        self.w_v = torch.nn.Linear(d_model, d_model) # Wv

        self.w_o = torch.nn.Linear(d_model, d_model) # Wo
        self.dropout = torch.nn.Dropout(dropout)


    @staticmethod
    def attention(query, key, value, mask, dropout: torch.nn.Dropout):
        d_k = query.size(-1)
        # (batch, h, seq_len, d_k) --> (batch, h, seq_len, seq_len)
        attention_scores = torch.matmul(query @ key.transpose(-2, -1)) / math.sqrt(d_k)
        if mask is not None:
            attention_scores = attention_scores.masked_fill(mask == 0, -1e9)
        attention_scores = torch.nn.functional.softmax(attention_scores, dim=-1)

        if dropout is not None:
            attention_scores = dropout(attention_scores)

        return (attention_scores @ value), attention_scores


    def forward(self, q, k, v, mask = None):
        batch_size = q.size(0)
        # Initalising the matrices in the forward method
        query = self.w_q(q)
        key = self.w_k(k)
        value = self.w_v(v)

        # (batch, seq_len, d_model) --> (batch, seq_len, h, d_k) --> (batch, h, seq_len, d_k) (applying transpose)
        query = query.view(batch_size, query.shape[1], self.h, self.d_k).transpoe(1, 2)
        key = key.view(batch_size, key.shape[1], self.h, self.d_k).transpoe(1, 2)
        value = value.view(batch_size, value.shape[1], self.h, self.d_k).transpoe(1, 2)

        x, self.attention_scores = MultiHeadAttentionBlock.attention(query, key, value, mask, self.dropout)
        x = x.transpoe(1, 2).contiguous().view(batch_size, -1, self.h * self.d_k)
        return self.w_o(x)

class ResidualConnection(torch.nn.Module):
  def __init__(self, dropout: float) -> None:
    super().__init__()
    self.dropout = torch.nn.Dropout(dropout)
    self.norm = LayerNormalization()

  def forward(self, x, sublayer):
    return x + self.dropout(sublayer(self.norm(x)))

class EncoderBlock(torch.nn.Module):
  def __init__(self, self_attention_block: MultiHeadAttentionBlock, feed_forward_block: FeedForwardBlock, dropout: float) -> None:
    super().__init__()
    self.self_attention_block = self_attention_block
    self.feed_forward_block = feed_forward_block
    self.residual_connections = torch.nn.ModuleList([ResidualConnection(dropout) for _ in range(2)])

  def forward(self, x, src_mask):
    x = self.residual_connections[0](x, lambda x: self.self_attention_block(x, x, x, src_mask))  # the first layer is called by lamba
    x = self.residual_connections[1](x, self.feed_forward_block)
    return x


class Encoder(torch.nn.Module):
  # as an encoder part of the transformer can have many encoder blocks
  def __init__(self, layers: torch.nn.ModuleList) -> None:
    super().__init__()
    self.layers = layers
    self.norm = LayerNormalization()

  def forward(self, x, mask):
    for layer in self.layers:
      x = layer(x, mask)
    return self.norm(x)

class DecoderBlock(torch.nn.Module):
    def __init__(self, self_attention_block: MultiHeadAttentionBlock, cross_attention_block: MultiHeadAttentionBlock, feed_forward_block: FeedForwardBlock, dropout) -> None:
        super().__init__()
        self.self_attention_block = self_attention_block
        self.cross_attention_block = cross_attention_block
        self.feed_forward_block = feed_forward_block
        self.residual_connections = torch.nn.ModuleList([ResidualConnection(dropout) for _ in range(3)])

    def forward(self, x, encoder_output, src_mask, tgt_mask):
      x = self.residual_connections[0](x, lambda x: self.self_attention_block(x, x, x, tgt_mask))
      x = self.residual_connections[1](x, lambda x: self.cross_attention_block(x, encoder_output, encoder_output, src_mask))
      x = self.residual_connections[2](x, self.feed_forward_block)
      return x

class Decoder(torch.nn.Module):
    def __init__(self, layers: torch.nn.ModuleList) -> None:
        super().__init__()
        self.layers = layers
        self.norm = LayerNormalization()

    def forward(self, x, encoder_output, src_mask, tgt_mask):
        for layer in self.layers:
            x = layer(x, encoder_output, src_mask, tgt_mask)
        return self.norm(x)

# Linear Layer
class ProjectionLayer(torch.nn.Module):
  def __init__(self, d_model, vocab_size):
    super().__init__()
    self.proj = torch.nn.Linear(d_model, vocab_size)

  def forward(self, x):
    return torch.log_softmax(self.proj(x), dim=-1)

class Transformer(torch.nn.Module):
  def __init__(self, encoder: Encoder, decoder: Decoder, src_embed: InputEmbeddings, tgt_embed: InputEmbeddings, src_pos: PositionalEncoding, tgt_pos: PositionalEncoding, projection_layer: ProjectionLayer) -> None:
    super().__init__()
    self.encoder = encoder
    self.decoder = decoder
    self.src_embed = src_embed
    self.tgt_embed = tgt_embed
    self.src_pos = src_pos
    self.tgt_pos = tgt_pos
    self.projection_layer = projection_layer

  def encode(self, src, src_mask):
    src = self.src_embed(src)
    src = self.src_pos(src)
    return self.encoder(src, src_mask)

  def decode(self, encoder_output, src_mask, tgt, tgt_mask):
    tgt = self.tgt_embed(tgt)
    tgt = self.tgt_pos(tgt)
    return self.decoder(tgt, encoder_output, src_mask, tgt_mask)

  def project(self, x):
    return self.project_layer(x)

  def build_transformer(src_vocab_size: int, tgt_vocab_size: int, src_seq_len: int, tgt_seq_len: int, d_model: int = 521, N: int = 6, h: int = 8, dropout: float = 0.1, d_ff = 2048):
    src_embed = InputEmbeddings(d_model, src_vocab_size)
    tgt_embed = InputEmbeddings(d_model, tgt_vocab_size)

    src_pos = PositionalEncoding(d_model, src_seq_len, dropout)
    tgt_pos = PositionalEncoding(d_model, tgt_seq_len, dropout)

    encoder = Encoder(N, d_model, h, d_ff, dropout)
    decoder = Decoder(N, d_model, h, d_ff, dropout)

    projection_layer = ProjectionLayer(d_model, tgt_vocab_size)

    transformer = Transformer(encoder, decoder, src_embed, tgt_embed, src_pos, tgt_pos, projection_layer)

    for p in transformer.parameters():
      if p.dim() > 1:
        torch.nn.init.xavier_uniform_(p)

    return transformer

"""### Dataset

"""

# import pandas as pd

# splits = {'train': 'squad_v2/train-00000-of-00001.parquet', 'validation': 'squad_v2/validation-00000-of-00001.parquet'}
# df = pd.read_parquet("hf://datasets/rajpurkar/squad_v2/" + splits["train"])

# print(df.shape)
# df.info()

# from torch.utils.data import Dataset, DataLoader
# from transformers import BertTokenizer

# tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# class QADataset(Dataset):
#     def __init__(self, dataframe):
#         self.dataframe = dataframe
#         self.tokenizer = tokenizer

#     def __len__(self):
#         return len(self.dataframe)

#     def __getitem__(self, idx):
#         row = self.dataframe.iloc[idx]
#         context = row['context']
#         question = row['question']
#         answer = row['answers']['text'][0]

#         # Tokenize
#         inputs = tokenizer.encode_plus(context, question, return_tensors='pt', truncation=True, padding='max_length', max_length=512)
#         labels = tokenizer.encode(answer, return_tensors='pt', truncation=True, padding='max_length', max_length=50)

#         return {
#             'input_ids': inputs['input_ids'].squeeze(),
#             'attention_mask': inputs['attention_mask'].squeeze(),
#             'labels': labels.squeeze()
#         }

# Initialize parameters
# src_vocab_size = tokenizer.vocab_size
# tgt_vocab_size = tokenizer.vocab_size
# d_model = 512
# src_seq_len = 512
# tgt_seq_len = 50

# Build the model
# transformer = Transformer.build_transformer(src_vocab_size, tgt_vocab_size, src_seq_len, tgt_seq_len, d_model)

# import torch.optim as optim

# # Define loss function and optimizer
# criterion = torch.nn.CrossEntropyLoss(ignore_index=tokenizer.pad_token_id)
# optimizer = optim.Adam(transformer.parameters(), lr=0.001)